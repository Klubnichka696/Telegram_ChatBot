import json
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8161815639:AAEbO5i_MfBt46pyi0HfTUmlVQxIDdQPtlk"
ADMIN_GROUP_ID = -2684367477  # ID –≥—Ä—É–ø–ø—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /add
LAST_SHOW_ITEMS = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
(
    MAIN_MENU, FLIGHTS_MENU, HOTELS_MENU,
    PROCESS_FLIGHTS, PROCESS_HOTELS,
    FILTER_FLIGHTS, FILTER_HOTELS
) = range(7)

class ContentAdder:
    def __init__(self, group_chat_id: int):
        self.GROUP_CHAT_ID = group_chat_id
        self.CONTENT_DB_FILE = "content_add_db.json"
        self.content_db = self.load_content_db()
        
        self.group_keyboard = ReplyKeyboardMarkup(
            [["‚úàÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç", "üè® –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å"], ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"]],
            resize_keyboard=True
        )

    def load_content_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.CONTENT_DB_FILE).exists():
                with open(self.CONTENT_DB_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return {"flights": {}, "hotels": {}}

    def save_content_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.CONTENT_DB_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.content_db, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def start_group_adding(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –≤ –≥—Ä—É–ø–ø–µ"""
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=self.group_keyboard
        )

    async def start_content_adding(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content_type: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        context.user_data['adding_content'] = {
            'type': content_type,
            'step': 0,
            'metadata': {
                "title": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "description": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "link": "–ù–µ—Ç —Å—Å—ã–ª–∫–∏",
                "price": "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        if content_type == "flights":
            context.user_data['adding_content']['metadata'].update({
                'airline': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'departure': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'destination': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'date': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'duration': "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            })
        elif content_type == "hotels":
            context.user_data['adding_content']['metadata'].update({
                'location': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'check_in': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'check_out': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'rating': "–ù–µ —É–∫–∞–∑–∞–Ω",
                'amenities': "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            })

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"""{'‚úàÔ∏è' if content_type == 'flights' else 'üè®'} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ {'–∞–≤–∏–∞–±–∏–ª–µ—Ç–∞' if content_type == 'flights' else '–æ—Ç–µ–ª—è'}</b>

            –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. 
            –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±–æ–π –ø—É–Ω–∫—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-".""",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove(),
            disable_web_page_preview=True
        )
    
        await self.ask_for_next_field(update, context)

    async def ask_for_next_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ"""
        content_type = context.user_data['adding_content']['type']
        step = context.user_data['adding_content']['step']
        metadata = context.user_data['adding_content']['metadata']

        # –ü–æ–ª—è —Å —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        fields_order = [
            ('title', "üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–≤–∏–∞–±–∏–ª–µ—Ç –≤ –ü–∞—Ä–∏–∂</i> –∏–ª–∏ <i>–û—Ç–µ–ª—å Marriott</i>)"),
            ('price', "üí∞ <b>–¶–µ–Ω–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>150$</i> –∏–ª–∏ <i>12000‚ÇΩ</i>)"),
            ('description', "üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n(–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        ]

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        if content_type == "flights":
            fields_order.extend([
                ('airline', "‚úàÔ∏è <b>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Aeroflot</i>)"),
                ('departure', "üõ´ <b>–û—Ç–∫—É–¥–∞:</b>\n(–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞</i>)"),
                ('destination', "üõ¨ <b>–ö—É–¥–∞:</b>\n(–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–∞—Ä–∏–∂</i>)"),
                ('date', "üìÖ <b>–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.07.2023</i>)"),
                ('duration', "‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>3—á 30–º</i>)")
            ])
        elif content_type == "hotels":
            fields_order.extend([
                ('location', "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è</i>)"),
                ('check_in', "üîë <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.07.2023</i>)"),
                ('check_out', "üö™ <b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>20.07.2023</i>)"),
                ('rating', "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>4.5/5</i>)"),
                ('amenities', "üõÅ <b>–£–¥–æ–±—Å—Ç–≤–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Wi-Fi, –±–∞—Å—Å–µ–π–Ω, –∑–∞–≤—Ç—Ä–∞–∫</i>)")
            ])

        if step < len(fields_order):
            field, prompt = fields_order[step]
            context.user_data['adding_content']['current_field'] = field

            await update.message.reply_text(
                prompt,
                parse_mode='HTML'
            )
        else:
            # –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            if 'link' not in context.user_data['adding_content']['metadata'] or context.user_data['adding_content']['metadata']['link'] == "–ù–µ—Ç —Å—Å—ã–ª–∫–∏":
                context.user_data['adding_content']['current_field'] = 'link'
                await update.message.reply_text(
                    "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n(URL –∏–ª–∏ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
                    parse_mode='HTML'
                )
            else:
                # –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                summary = self._generate_content_summary(metadata, content_type)
                await update.message.reply_text(
                    f"""‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

{summary}

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):""",
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                context.user_data['adding_content']['step'] = 'awaiting_photo'

    def _generate_content_summary(self, metadata: dict, content_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        content_type_name = {
            "flights": "–ê–≤–∏–∞–±–∏–ª–µ—Ç",
            "hotels": "–û—Ç–µ–ª—å" 
        }[content_type]

        summary = [f"\nüìã <b>{content_type_name}:</b> <i>{metadata['title']}</i>"]

        # –û–±—â–∏–µ –ø–æ–ª—è
        fields = [
            ('price', 'üí∞ –¶–µ–Ω–∞:'),
            ('description', 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ:')
        ]

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤
        if content_type == "flights":
            fields.extend([
                ('airline', '‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:'),
                ('departure', 'üõ´ –û—Ç–∫—É–¥–∞:'),
                ('destination', 'üõ¨ –ö—É–¥–∞:'),
                ('date', 'üìÖ –î–∞—Ç–∞:'),
                ('duration', '‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')
            ])
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–µ–ª–µ–π
        elif content_type == "hotels":
            fields.extend([
                ('location', 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:'),
                ('check_in', 'üîë –ó–∞–µ–∑–¥:'),
                ('check_out', 'üö™ –í—ã–µ–∑–¥:'),
                ('rating', '‚≠ê –†–µ–π—Ç–∏–Ω–≥:'),
                ('amenities', 'üõÅ –£–¥–æ–±—Å—Ç–≤–∞:')
            ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        for field, emoji in fields:
            value = metadata.get(field)
            if value and value != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                summary.append(f"{emoji} <i>{value}</i>")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if metadata.get('link') and metadata['link'] != "–ù–µ—Ç —Å—Å—ã–ª–∫–∏":
            summary.append(f"\nüîó <b>–°—Å—ã–ª–∫–∞:</b> <i>{metadata['link']}</i>")

        return "\n".join(summary)
    
    async def handle_content_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"""
        if 'adding_content' not in context.user_data:
            return

        current_field = context.user_data['adding_content']['current_field']
        value = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–ª—è
        if value == "-":
            value = "–ù–µ—Ç —Å—Å—ã–ª–∫–∏" if current_field == "link" else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        context.user_data['adding_content']['metadata'][current_field] = value

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        field_names = {
            'title': "–ù–∞–∑–≤–∞–Ω–∏–µ",
            'price': "–¶–µ–Ω–∞",
            'description': "–û–ø–∏—Å–∞–Ω–∏–µ",
            'link': "–°—Å—ã–ª–∫–∞",
            'airline': "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è",
            'departure': "–û—Ç–∫—É–¥–∞",
            'destination': "–ö—É–¥–∞",
            'date': "–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞",
            'duration': "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞",
            'location': "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            'check_in': "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞",
            'check_out': "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞",
            'rating': "–†–µ–π—Ç–∏–Ω–≥",
            'amenities': "–£–¥–æ–±—Å—Ç–≤–∞"
        }

        await update.message.reply_text(
            f"‚úÖ <b>{field_names[current_field]}:</b> <i>{value}</i>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
        context.user_data['adding_content']['step'] += 1

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
        await self.ask_for_next_field(update, context)

    async def handle_content_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if ('adding_content' not in context.user_data or 
            context.user_data['adding_content'].get('step') != 'awaiting_photo'):
            return  # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

        content_type = context.user_data['adding_content']['type']
        metadata = context.user_data['adding_content']['metadata']

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if update.message.text and update.message.text.strip() == "-":
            file_id = None
        else:
            if not update.message.photo:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
                return
            
            file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            file_id = file.file_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.content_db[content_type][metadata["title"]] = {
            "file_id": file_id,
            "is_photo": file_id is not None,
            "message_id": update.message.message_id,
            "metadata": metadata
        }
        self.save_content_db()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ {'–ê–≤–∏–∞–±–∏–ª–µ—Ç' if content_type == 'flights' else '–û—Ç–µ–ª—å'} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
            reply_markup=self.create_group_keyboard(),
            disable_web_page_preview=True
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['adding_content']

    async def handle_group_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
        text = update.message.text
    
        if text == "‚úàÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç":
            await self.start_content_adding(update, context, "flights")
        elif text == "üè® –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å":
            await self.start_content_adding(update, context, "hotels")
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
            await update.message.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=ReplyKeyboardRemove()
            )
            if 'adding_content' in context.user_data:
                del context.user_data['adding_content']
        elif 'adding_content' in context.user_data:
            # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if context.user_data['adding_content']['step'] == 'awaiting_photo':
                await self.handle_content_photo(update, context)
            else:
                await self.handle_content_field(update, context)

class ContentManager:
    def __init__(self, group_chat_id: int):
        self.GROUP_CHAT_ID = group_chat_id
        self.CONTENT_DB_FILE = "content_add_db.json"
        self.DATA_FILE = "data.json"
        self.travel_data = self.load_content_db()
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self.group_keyboard = ReplyKeyboardMarkup(
            [
                ["‚úàÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç", "üè® –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    def create_group_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        return self.group_keyboard

    def load_content_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if Path(self.CONTENT_DB_FILE).exists():
                with open(self.CONTENT_DB_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return {"flights": {}, "hotels": {}}

    def save_content_db(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.CONTENT_DB_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.content_db, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def start_content_adding(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content_type: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        context.user_data['adding_content'] = {
            'type': content_type,
            'step': 0,
            'metadata': {
                "title": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "description": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "link": "–ù–µ—Ç —Å—Å—ã–ª–∫–∏",
                "price": "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
        if content_type == "flights":
            context.user_data['adding_content']['metadata'].update({
                'airline': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'departure': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'destination': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'date': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'duration': "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            })
        elif content_type == "hotels":
            context.user_data['adding_content']['metadata'].update({
                'location': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                'check_in': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'check_out': "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                'rating': "–ù–µ —É–∫–∞–∑–∞–Ω",
                'amenities': "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            })

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"""{'‚úàÔ∏è' if content_type == 'flights' else 'üè®'} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ {'–∞–≤–∏–∞–±–∏–ª–µ—Ç–∞' if content_type == 'flights' else '–æ—Ç–µ–ª—è'}</b>

            –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. 
            –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±–æ–π –ø—É–Ω–∫—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-".""",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove(),
            disable_web_page_preview=True
        )
    
        await self.ask_for_next_field(update, context)

    async def ask_for_next_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ"""
        content_type = context.user_data['adding_content']['type']
        step = context.user_data['adding_content']['step']
        metadata = context.user_data['adding_content']['metadata']

        # –ü–æ–ª—è —Å —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        fields_order = [
            ('title', "üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–≤–∏–∞–±–∏–ª–µ—Ç –≤ –ü–∞—Ä–∏–∂</i> –∏–ª–∏ <i>–û—Ç–µ–ª—å Marriott</i>)"),
            ('price', "üí∞ <b>–¶–µ–Ω–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>150$</i> –∏–ª–∏ <i>12000‚ÇΩ</i>)"),
            ('description', "üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n(–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        ]

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        if content_type == "flights":
            fields_order.extend([
                ('airline', "‚úàÔ∏è <b>–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Aeroflot</i>)"),
                ('departure', "üõ´ <b>–û—Ç–∫—É–¥–∞:</b>\n(–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞</i>)"),
                ('destination', "üõ¨ <b>–ö—É–¥–∞:</b>\n(–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–∞—Ä–∏–∂</i>)"),
                ('date', "üìÖ <b>–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.07.2023</i>)"),
                ('duration', "‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>3—á 30–º</i>)")
            ])
        elif content_type == "hotels":
            fields_order.extend([
                ('location', "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è</i>)"),
                ('check_in', "üîë <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.07.2023</i>)"),
                ('check_out', "üö™ <b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>20.07.2023</i>)"),
                ('rating', "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>4.5/5</i>)"),
                ('amenities', "üõÅ <b>–£–¥–æ–±—Å—Ç–≤–∞:</b>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Wi-Fi, –±–∞—Å—Å–µ–π–Ω, –∑–∞–≤—Ç—Ä–∞–∫</i>)")
            ])

        if step < len(fields_order):
            field, prompt = fields_order[step]
            context.user_data['adding_content']['current_field'] = field

            await update.message.reply_text(
                prompt,
                parse_mode='HTML'
            )
        else:
            # –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            if 'link' not in context.user_data['adding_content']['metadata'] or context.user_data['adding_content']['metadata']['link'] == "–ù–µ—Ç —Å—Å—ã–ª–∫–∏":
                context.user_data['adding_content']['current_field'] = 'link'
                await update.message.reply_text(
                    "üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n(URL –∏–ª–∏ \"-\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
                    parse_mode='HTML'
                )
            else:
                # –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                summary = self._generate_content_summary(metadata, content_type)
                await update.message.reply_text(
                    f"""‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

{summary}

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):""",
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                context.user_data['adding_content']['step'] = 'awaiting_photo'

    def _generate_content_summary(self, metadata: dict, content_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        content_type_name = {
            "flights": "–ê–≤–∏–∞–±–∏–ª–µ—Ç",
            "hotels": "–û—Ç–µ–ª—å" 
        }[content_type]

        summary = [f"\nüìã <b>{content_type_name}:</b> <i>{metadata['title']}</i>"]

        # –û–±—â–∏–µ –ø–æ–ª—è
        fields = [
            ('price', 'üí∞ –¶–µ–Ω–∞:'),
            ('description', 'üìñ –û–ø–∏—Å–∞–Ω–∏–µ:')
        ]

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤
        if content_type == "flights":
            fields.extend([
                ('airline', '‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è:'),
                ('departure', 'üõ´ –û—Ç–∫—É–¥–∞:'),
                ('destination', 'üõ¨ –ö—É–¥–∞:'),
                ('date', 'üìÖ –î–∞—Ç–∞:'),
                ('duration', '‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')
            ])
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–µ–ª–µ–π
        elif content_type == "hotels":
            fields.extend([
                ('location', 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:'),
                ('check_in', 'üîë –ó–∞–µ–∑–¥:'),
                ('check_out', 'üö™ –í—ã–µ–∑–¥:'),
                ('rating', '‚≠ê –†–µ–π—Ç–∏–Ω–≥:'),
                ('amenities', 'üõÅ –£–¥–æ–±—Å—Ç–≤–∞:')
            ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        for field, emoji in fields:
            value = metadata.get(field)
            if value and value != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
                summary.append(f"{emoji} <i>{value}</i>")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if metadata.get('link') and metadata['link'] != "–ù–µ—Ç —Å—Å—ã–ª–∫–∏":
            summary.append(f"\nüîó <b>–°—Å—ã–ª–∫–∞:</b> <i>{metadata['link']}</i>")

        return "\n".join(summary)
    
    async def handle_content_field(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"""
        if 'adding_content' not in context.user_data:
            return

        current_field = context.user_data['adding_content']['current_field']
        value = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–ª—è
        if value == "-":
            value = "–ù–µ—Ç —Å—Å—ã–ª–∫–∏" if current_field == "link" else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        context.user_data['adding_content']['metadata'][current_field] = value

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞
        field_names = {
            'title': "–ù–∞–∑–≤–∞–Ω–∏–µ",
            'price': "–¶–µ–Ω–∞",
            'description': "–û–ø–∏—Å–∞–Ω–∏–µ",
            'link': "–°—Å—ã–ª–∫–∞",
            'airline': "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è",
            'departure': "–û—Ç–∫—É–¥–∞",
            'destination': "–ö—É–¥–∞",
            'date': "–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞",
            'duration': "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞",
            'location': "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            'check_in': "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞",
            'check_out': "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞",
            'rating': "–†–µ–π—Ç–∏–Ω–≥",
            'amenities': "–£–¥–æ–±—Å—Ç–≤–∞"
        }

        await update.message.reply_text(
            f"‚úÖ <b>{field_names[current_field]}:</b> <i>{value}</i>",
            parse_mode='HTML',
            disable_web_page_preview=True
        )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
        context.user_data['adding_content']['step'] += 1

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
        await self.ask_for_next_field(update, context)

    async def handle_content_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if ('adding_content' not in context.user_data or 
            context.user_data['adding_content'].get('step') != 'awaiting_photo'):
            return  # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

        content_type = context.user_data['adding_content']['type']
        metadata = context.user_data['adding_content']['metadata']

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "-", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if update.message.text and update.message.text.strip() == "-":
            file_id = None
        else:
            if not update.message.photo:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
                return
            
            file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            file_id = file.file_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.content_db[content_type][metadata["title"]] = {
            "file_id": file_id,
            "is_photo": file_id is not None,
            "message_id": update.message.message_id,
            "metadata": metadata
        }
        self.save_content_db()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"‚úÖ {'–ê–≤–∏–∞–±–∏–ª–µ—Ç' if content_type == 'flights' else '–û—Ç–µ–ª—å'} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
            reply_markup=self.create_group_keyboard(),
            disable_web_page_preview=True
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['adding_content']

    async def handle_group_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if 'adding_content' in context.user_data:
            # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if context.user_data['adding_content']['step'] == 'awaiting_photo':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫)
                await self.handle_content_photo(update, context)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await self.handle_content_field(update, context)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.handle_group_command(update, context)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
content_manager = ContentManager(ADMIN_GROUP_ID)

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã", callback_data='flights'),
            InlineKeyboardButton("üè® –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã", callback_data='hotels')
        ],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
    ])

def flights_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã", callback_data='search_flights')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data='list_flights')],
        [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É", callback_data='flights_tips')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_to_main')]
    ])

def hotels_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª–∏", callback_data='search_hotels')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data='list_hotels')],
        [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É", callback_data='hotels_tips')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_to_main')]
    ])

def flights_tips_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º", callback_data='back_to_flights')]
    ])

def hotels_tips_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç–µ–ª—è–º", callback_data='back_to_hotels')]
    ])

def search_results_keyboard(item_type):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data=f'filter_{item_type}')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f'back_to_{item_type}')]
    ])

def filter_options_keyboard(item_type):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ (–¥–µ—à–µ–≤—ã–µ)", callback_data=f'filter_{item_type}_price_asc')],
        [InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ (–¥–æ—Ä–æ–≥–∏–µ)", callback_data=f'filter_{item_type}_price_desc')],
        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ", callback_data=f'filter_{item_type}_newest')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data=f'back_to_results_{item_type}')]
    ])

def back_keyboard(target_menu):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f'back_to_{target_menu}')]
    ])

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_main_menu(update)
    return MAIN_MENU

async def show_main_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TravelBot! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏:\n"
        "‚Ä¢ –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º\n"
        "‚Ä¢ –û—Ç–µ–ª–∏ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text(text, reply_markup=main_menu_keyboard())

# ========== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ==========
async def show_last_items(update: Update, item_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
    items = content_manager.travel_data[item_type][-LAST_SHOW_ITEMS:] if content_manager.travel_data[item_type] else []
    
    if not items:
        text = f"‚úàÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</b> ‚úàÔ∏è\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤." if item_type == 'flights' else \
               f"üè® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏</b> üè®\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    else:
        text = f"‚úàÔ∏è <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</b> ‚úàÔ∏è\n\n" if item_type == 'flights' else \
               f"üè® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–µ–ª–∏</b> üè®\n\n"
        for item in items:
            meta = item.get('metadata', {})
            text += (
                f"<b>{meta.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"üíµ –¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {meta.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {meta.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
            )
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞."
    
    keyboard = search_results_keyboard(item_type)
    
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')

async def show_all_items(update: Update, item_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–ª—è list_flights –∏ list_hotels)"""
    items = content_manager.travel_data[item_type] if content_manager.travel_data[item_type] else []
    
    if not items:
        text = f"‚úàÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</b> ‚úàÔ∏è\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤." if item_type == 'flights' else \
               f"üè® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏</b> üè®\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    else:
        text = f"‚úàÔ∏è <b>–í—Å–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</b> ‚úàÔ∏è\n\n" if item_type == 'flights' else \
               f"üè® <b>–í—Å–µ –æ—Ç–µ–ª–∏</b> üè®\n\n"
        for item in items:
            meta = item.get('metadata', {})
            text += (
                f"<b>{meta.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"üíµ –¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {meta.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {meta.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
            )
    
    keyboard = back_keyboard('flights' if item_type == 'flights' else 'hotels')
    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='HTML')

def apply_filters(items, filter_type):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    if filter_type == 'price_asc':
        return sorted(items, key=lambda x: float(x.get('metadata', {}).get('price', '0').split()[0].replace('$', '').replace('‚Ç¨', '').replace('‚ÇΩ', '')))
    elif filter_type == 'price_desc':
        return sorted(items, key=lambda x: float(x.get('metadata', {}).get('price', '0').split()[0].replace('$', '').replace('‚Ç¨', '').replace('‚ÇΩ', ''), reverse=True))
    elif filter_type == 'newest':
        return items[-LAST_SHOW_ITEMS:]
    return items

async def show_filtered_items(update: Update, item_type: str, filter_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    items = apply_filters(content_manager.travel_data[item_type], filter_type)
    items = items[-LAST_SHOW_ITEMS:] if items else []
    
    if not items:
        text = f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {'–∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤' if item_type == 'flights' else '–æ—Ç–µ–ª–µ–π'} —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."
    else:
        text = f"‚úàÔ∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã (—Ñ–∏–ª—å—Ç—Ä: {'–¥–µ—à–µ–≤—ã–µ' if filter_type == 'price_asc' else '–¥–æ—Ä–æ–≥–∏–µ' if filter_type == 'price_desc' else '–Ω–æ–≤—ã–µ'}):\n\n" if item_type == 'flights' else \
              f"üè® –û—Ç–µ–ª–∏ (—Ñ–∏–ª—å—Ç—Ä: {'–¥–µ—à–µ–≤—ã–µ' if filter_type == 'price_asc' else '–¥–æ—Ä–æ–≥–∏–µ' if filter_type == 'price_desc' else '–Ω–æ–≤—ã–µ'}):\n\n"
        for item in items:
            meta = item.get('metadata', {})
            text += (
                f"<b>{meta.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"üíµ –¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {meta.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {meta.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
            )
    
    keyboard = search_results_keyboard(item_type)
    await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode='HTML')

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'flights':
        await show_flights_menu(update)
        return FLIGHTS_MENU
    elif query.data == 'hotels':
        await show_hotels_menu(update)
        return HOTELS_MENU
    elif query.data == 'about':
        about_text = (
            "‚ÑπÔ∏è <b>–û StayFlyBot</b> ‚ÑπÔ∏è\n\n"
            "–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã "
            "–∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –∏ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.\n\n"
            "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
            "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–µ–ª–∏\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n\n"
            "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.1\n"
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 01.01.2023"
        )
        await query.message.reply_text(about_text, parse_mode='HTML')
    elif query.data == 'back_to_main':
        await show_main_menu(update)
        return MAIN_MENU
    return MAIN_MENU

async def show_flights_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
    menu_text = (
        "‚úàÔ∏è <b>–ú–µ–Ω—é –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤</b> ‚úàÔ∏è\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π!"
    )
    
    if update.callback_query:
        await update.callback_query.message.reply_text(menu_text, reply_markup=flights_menu_keyboard(), parse_mode='HTML')
    else:
        await update.message.reply_text(menu_text, reply_markup=flights_menu_keyboard(), parse_mode='HTML')

async def show_hotels_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–µ–ª–µ–π"""
    menu_text = (
        "üè® <b>–ú–µ–Ω—é –≥–æ—Å—Ç–∏–Ω–∏—Ü</b> üè®\n\n"
        "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –æ—Ç–µ–ª–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π!"
    )
    
    if update.callback_query:
        await update.callback_query.message.reply_text(menu_text, reply_markup=hotels_menu_keyboard(), parse_mode='HTML')
    else:
        await update.message.reply_text(menu_text, reply_markup=hotels_menu_keyboard(), parse_mode='HTML')

async def handle_flights_tips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º"""
    query = update.callback_query
    await query.answer()
    
    tips_text = (
        "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤</b> üí°\n\n"
        "1. –ò—â–∏—Ç–µ –±–∏–ª–µ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ\n"
        "2. –ü–æ–∫—É–ø–∞–π—Ç–µ –±–∏–ª–µ—Ç—ã –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —Å—Ä–µ–¥—É\n"
        "3. –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - 6-8 –Ω–µ–¥–µ–ª—å –¥–æ –≤—ã–ª–µ—Ç–∞\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–∞–ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "5. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã"
    )
    
    await query.message.reply_text(tips_text, reply_markup=flights_tips_keyboard(), parse_mode='HTML')
    return FLIGHTS_MENU

async def handle_hotels_tips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –æ—Ç–µ–ª—è–º"""
    query = update.callback_query
    await query.answer()
    
    tips_text = (
        "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É –æ—Ç–µ–ª–µ–π</b> üí°\n\n"
        "1. –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–π—Ç–∞—Ö\n"
        "2. –ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–∞–π—Ç –æ—Ç–µ–ª—è\n"
        "3. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Å–±–æ—Ä–æ–≤\n"
        "4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –≥–æ—Å—Ç–µ–≤—ã–µ –¥–æ–º–∞)\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫-—Å–µ—Ä–≤–∏—Å—ã"
    )
    
    await query.message.reply_text(tips_text, reply_markup=hotels_tips_keyboard(), parse_mode='HTML')
    return HOTELS_MENU

async def handle_search_flights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
    await show_last_items(update, 'flights')
    return PROCESS_FLIGHTS

async def handle_search_hotels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"""
    await show_last_items(update, 'hotels')
    return PROCESS_HOTELS

async def handle_list_flights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
    await show_all_items(update, 'flights')
    return FLIGHTS_MENU

async def handle_list_hotels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–µ–ª–µ–π"""
    await show_all_items(update, 'hotels')
    return HOTELS_MENU

async def handle_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('filter_flights'):
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤:",
            reply_markup=filter_options_keyboard('flights')
        )
        return FILTER_FLIGHTS
    elif query.data.startswith('filter_hotels'):
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –æ—Ç–µ–ª–µ–π:",
            reply_markup=filter_options_keyboard('hotels')
        )
        return FILTER_HOTELS

async def handle_filter_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    if '_flights_' in query.data:
        filter_type = query.data.split('_')[-1]
        await show_filtered_items(update, 'flights', filter_type)
        return PROCESS_FLIGHTS
    elif '_hotels_' in query.data:
        filter_type = query.data.split('_')[-1]
        await show_filtered_items(update, 'hotels', filter_type)
        return PROCESS_HOTELS

async def handle_back_to_flights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"""
    await show_flights_menu(update)
    return FLIGHTS_MENU

async def handle_back_to_hotels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ—Ç–µ–ª–µ–π"""
    await show_hotels_menu(update)
    return HOTELS_MENU

async def handle_back_to_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    if 'flights' in query.data:
        await show_last_items(update, 'flights')
        return PROCESS_FLIGHTS
    elif 'hotels' in query.data:
        await show_last_items(update, 'hotels')
        return PROCESS_HOTELS

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    application = Application.builder().token(TOKEN).build()
    
    content_adder = ContentAdder(ADMIN_GROUP_ID)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
    group_handlers = [
        CommandHandler("add", content_adder.start_group_adding),
        MessageHandler(filters.TEXT & filters.Chat(ADMIN_GROUP_ID), 
                     content_adder.handle_group_text_message),
        MessageHandler(filters.PHOTO & filters.Chat(ADMIN_GROUP_ID),
                     content_adder.handle_content_photo)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in group_handlers:
        application.add_handler(handler)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            FLIGHTS_MENU: [
                CallbackQueryHandler(handle_search_flights, pattern='^search_flights$'),
                CallbackQueryHandler(handle_list_flights, pattern='^list_flights$'),
                CallbackQueryHandler(handle_flights_tips, pattern='^flights_tips$'),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_main$')
            ],
            HOTELS_MENU: [
                CallbackQueryHandler(handle_search_hotels, pattern='^search_hotels$'),
                CallbackQueryHandler(handle_list_hotels, pattern='^list_hotels$'),
                CallbackQueryHandler(handle_hotels_tips, pattern='^hotels_tips$'),
                CallbackQueryHandler(handle_main_menu, pattern='^back_to_main$')
            ],
            PROCESS_FLIGHTS: [
                CallbackQueryHandler(handle_filters, pattern='^filter_flights$'),
                CallbackQueryHandler(handle_back_to_flights, pattern='^back_to_flights$'),
                CallbackQueryHandler(handle_filter_apply, pattern='^filter_flights_')
            ],
            PROCESS_HOTELS: [
                CallbackQueryHandler(handle_filters, pattern='^filter_hotels$'),
                CallbackQueryHandler(handle_back_to_hotels, pattern='^back_to_hotels$'),
                CallbackQueryHandler(handle_filter_apply, pattern='^filter_hotels_')
            ],
            FILTER_FLIGHTS: [
                CallbackQueryHandler(handle_filter_apply, pattern='^filter_flights_'),
                CallbackQueryHandler(handle_back_to_results, pattern='^back_to_results_flights$')
            ],
            FILTER_HOTELS: [
                CallbackQueryHandler(handle_filter_apply, pattern='^filter_hotels_'),
                CallbackQueryHandler(handle_back_to_results, pattern='^back_to_results_hotels$')
            ]
        },
        fallbacks=[]
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
    application.add_handler(CommandHandler(
        "start_add",
        content_adder.start_content_adding,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º content_adder
        filters=filters.Chat(ADMIN_GROUP_ID)
    ))

    application.add_handler(MessageHandler(
        filters.Chat(ADMIN_GROUP_ID) & filters.TEXT,
        content_adder.handle_group_text_message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º content_adder
    ))

    application.add_handler(MessageHandler(
        filters.Chat(ADMIN_GROUP_ID) & filters.PHOTO,
        content_adder.handle_content_photo  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    ))

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
